# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.10

services:
  - redis:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# https://pip.pypa.io/en/stable/topics/caching/
cache:
  paths:
    - .cache/pip

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

before_script:
  - curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba
  - export MAMBA_ROOT_PREFIX=/micromamba
  - eval "$(./bin/micromamba shell hook -s posix)"
  - micromamba env create -f conda-environment.yml
  - micromamba run --name mxcubeweb poetry install

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Build"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - micromamba run --name mxcubeweb poetry run pre-commit run --all-files

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - micromamba run --name mxcubeweb poetry run pytest

e2e-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
