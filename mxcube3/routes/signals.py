import logging, json
from flask.ext.socketio import emit
from mxcube3 import socketio

samples_list = '[{"smiles": null, "holderLength": 22.0, "code": null, "containerSampleChangerLocation": "4", "proteinAcronym": "A-TIM", "cellGamma": 0.0, "cellAlpha": 0.0, "sampleId": 493129, "cellBeta": 0.0, "crystalSpaceGroup": "P21212", "sampleLocation": "4", "sampleName": "f01", "cellA": 0.0, "diffractionPlan": "", "cellC": 0.0, "cellB": 0.0, "experimentType": "MXPressO"}, {"smiles": null, "holderLength": 22.0, "code": null, "containerSampleChangerLocation": "4", "proteinAcronym": "A-TIM", "cellGamma": 10.0, "cellAlpha": 10.0, "sampleId": 493126, "cellBeta": 10.0, "crystalSpaceGroup": "C3", "sampleLocation": "1", "sampleName": "hfd01", "cellA": 1.0, "diffractionPlan": "", "cellC": 10.0, "cellB": 1.0, "experimentType": "Default"}, {"holderLength": 22.0, "code": null, "containerSampleChangerLocation": "6", "proteinAcronym": "A-TIM", "cellGamma": 0.0, "cellAlpha": 0.0, "sampleId": 511551, "cellBeta": 22.0, "crystalSpaceGroup": "Undefined", "sampleLocation": "1", "sampleName": "testsd1", "cellA": 0.0, "diffractionPlan": "", "cellC": 0.0, "cellB": 0.0, "experimentType": "Default"}, {"holderLength": 22.0, "code": null, "containerSampleChangerLocation": "3", "proteinAcronym": "A-TIM", "cellGamma": 0.0, "cellAlpha": 0.0, "sampleId": 511552, "cellBeta": 22.0, "crystalSpaceGroup": "Undefined", "sampleLocation": "1", "sampleName": "testpuck6", "cellA": 0.0, "diffractionPlan": "", "cellC": 0.0, "cellB": 0.0, "experimentType": "Default"}, {"smiles": null, "holderLength": 22.0, "code": null, "containerSampleChangerLocation": "4", "proteinAcronym": "A315S", "cellGamma": 0.0, "cellAlpha": 0.0, "sampleId": 493127, "cellBeta": 0.0, "crystalSpaceGroup": "P2221", "sampleLocation": "2", "sampleName": "d01", "cellA": 0.0, "diffractionPlan": "", "cellC": 0.0, "cellB": 0.0, "experimentType": "Default"}, {"smiles": null, "holderLength": 22.0, "code": null, "containerSampleChangerLocation": "4", "proteinAcronym": "A315S", "cellGamma": 0.0, "cellAlpha": 0.0, "sampleId": 493128, "cellBeta": 0.0, "crystalSpaceGroup": "P2221", "sampleLocation": "3", "sampleName": "d02", "cellA": 0.0, "diffractionPlan": "", "cellC": 0.0, "cellB": 0.0, "experimentType": "MXScore"}, {"smiles": null, "holderLength": 22.0, "code": null, "containerSampleChangerLocation": "2", "proteinAcronym": "cp", "cellGamma": 90.0, "cellAlpha": 90.0, "sampleId": 511688, "cellBeta": 99.0, "crystalSpaceGroup": "C2", "sampleLocation": "1", "sampleName": "xtal1", "cellA": 56.0, "diffractionPlan": "", "cellC": 88.0, "cellB": 67.0}, {"smiles": null, "holderLength": 22.0, "code": null, "containerSampleChangerLocation": "2", "proteinAcronym": "cp", "cellGamma": 90.0, "cellAlpha": 90.0, "sampleId": 511689, "cellBeta": 99.0, "crystalSpaceGroup": "C2", "sampleLocation": "2", "sampleName": "xtal2", "cellA": 56.0, "diffractionPlan": "", "cellC": 88.0, "cellB": 67.0}, {"smiles": null, "holderLength": 22.0, "code": null, "containerSampleChangerLocation": "2", "proteinAcronym": "cp", "cellGamma": 90.0, "cellAlpha": 90.0, "sampleId": 511690, "cellBeta": 99.0, "crystalSpaceGroup": "C2", "sampleLocation": "3", "sampleName": "xtal3", "cellA": 56.0, "diffractionPlan": "", "cellC": 88.0, "cellB": 67.0}, {"smiles": null, "holderLength": 22.0, "code": null, "containerSampleChangerLocation": "2", "proteinAcronym": "cp", "cellGamma": 90.0, "cellAlpha": 90.0, "sampleId": 511691, "cellBeta": 99.0, "crystalSpaceGroup": "C2", "sampleLocation": "4", "sampleName": "xtal4", "cellA": 56.0, "diffractionPlan": "", "cellC": 88.0, "cellB": 67.0}, {"smiles": null, "holderLength": 22.0, "code": null, "containerSampleChangerLocation": "2", "proteinAcronym": "cp", "cellGamma": 90.0, "cellAlpha": 90.0, "sampleId": 511692, "cellBeta": 99.0, "crystalSpaceGroup": "C2", "sampleLocation": "5", "sampleName": "xtal5", "cellA": 56.0, "diffractionPlan": "", "cellC": 88.0, "cellB": 67.0}, {"smiles": null, "holderLength": 22.0, "code": null, "containerSampleChangerLocation": "2", "proteinAcronym": "cp", "cellGamma": 90.0, "cellAlpha": 90.0, "sampleId": 511693, "cellBeta": 99.0, "crystalSpaceGroup": "C2", "sampleLocation": "6", "sampleName": "xtal6", "cellA": 56.0, "diffractionPlan": "", "cellC": 88.0, "cellB": 67.0}, {"smiles": null, "holderLength": 22.0, "code": null, "containerSampleChangerLocation": "2", "proteinAcronym": "cp", "cellGamma": 90.0, "cellAlpha": 90.0, "sampleId": 511694, "cellBeta": 99.0, "crystalSpaceGroup": "C2", "sampleLocation": "7", "sampleName": "xtal7", "cellA": 56.0, "diffractionPlan": "", "cellC": 88.0, "cellB": 67.0}, {"smiles": null, "holderLength": 22.0, "code": null, "containerSampleChangerLocation": "2", "proteinAcronym": "cp", "cellGamma": 90.0, "cellAlpha": 90.0, "sampleId": 511695, "cellBeta": 99.0, "crystalSpaceGroup": "C2", "sampleLocation": "8", "sampleName": "xtal8", "cellA": 56.0, "diffractionPlan": "", "cellC": 88.0, "cellB": 67.0}, {"smiles": "gfff", "holderLength": 22.0, "code": null, "containerSampleChangerLocation": "4", "proteinAcronym": "FAE", "cellGamma": 90.0, "cellAlpha": 90.0, "sampleId": 493130, "cellBeta": 90.0, "crystalSpaceGroup": "P212121", "sampleLocation": "5", "sampleName": "d01", "cellA": 65.400000000000006, "diffractionPlan": "", "cellC": 113.90000000000001, "cellB": 108.8, "experimentType": "MXPressE"}, {"smiles": null, "holderLength": 22.0, "code": null, "containerSampleChangerLocation": "10", "proteinAcronym": "LysoTetra", "cellGamma": 90.0, "cellAlpha": 90.0, "sampleId": 508582, "cellBeta": 90.0, "crystalSpaceGroup": "P43212", "sampleLocation": "1", "sampleName": "Dimple1", "cellA": 78.938000000000002, "diffractionPlan": "", "cellC": 36.881999999999998, "cellB": 78.938000000000002, "experimentType": "Default"}, {"smiles": null, "holderLength": 22.0, "code": null, "containerSampleChangerLocation": "24", "proteinAcronym": "THAU", "cellGamma": 90.0, "cellAlpha": 90.0, "sampleId": 508584, "cellBeta": 90.0, "crystalSpaceGroup": "P41212", "sampleLocation": "1", "sampleName": "dimple2", "cellA": 57.299999999999997, "diffractionPlan": "", "cellC": 148.80000000000001, "cellB": 57.299999999999997}, {"smiles": null, "holderLength": 22.0, "code": null, "containerSampleChangerLocation": "1", "proteinAcronym": "tryp", "cellGamma": 120.0, "cellAlpha": 90.0, "sampleId": 510070, "cellBeta": 90.0, "crystalSpaceGroup": "Undefined", "sampleLocation": "1", "sampleName": "dimple1", "cellA": 54.590000000000003, "diffractionPlan": "", "cellC": 107.09, "cellB": 54.590000000000003}]'

MaxLabMicrodiff_signals = ['minidiffReady','minidiffNotReady','phizMotorStateChanged','phiyMotorStateChanged','zoomMotorPredefinedPositionChanged','zoomMotorStateChanged','sampxMotorStateChanged','sampyMotorStateChanged','centringInvalid','newAutomaticCentringPoint','centringStarted','centringAccepted','centringMoving','centringFailed','centringSuccessful','progressMessage','centringSnapshots'] #'phiMotorStateChanged','minidiffStateChanged', 'diffractometerMoved', removed to cleanup the log

BL9113MultiCollect_signals = ['collectConnected', 'collectReady',  'collectNumberOfFrames', 'collectImageTaken','collectReady','collectStarted','collectOscillationStarted', 'collectOscillationFailed', 'collectOscillationFinished','collectEnded']

def signalCallback4(*args, **kwargs):
    logging.getLogger("HWR").debug(kwargs) 
    logging.getLogger("HWR").debug(args) 
    sender = str(kwargs['sender'].__class__).split('.')[0]
    signal = kwargs['signal']
    if len(args) >0:
        if args[0] in MaxLabMicrodiff_signals:
            msg = {'data':'no data', 'signal': args[0],'sender':sender}
        else:
            msg = {'data':json.dumps(args), 'signal': signal,'sender':sender}
    else:
        msg = {'data':'A signal', 'signal': signal,'sender':sender}
    
    logging.getLogger("HWR").debug('Signal callback. origin: "%s",signal: "%s"' %(sender,signal))
    try:
        socketio.emit('newSignal',msg , namespace='/test')
    except:
        logging.getLogger("HWR").error('error creating the message')

# def signalCallback(aSignal, aSender, *args):
#     try:
#         logging.getLogger("HWR").debug('Signal callback. origin: "%s",signal: "%s"' %(aSender,aSignal))
#         msg = {'data':'A signal', 'signal': aSignal,'sender':str(aSender.__class__).split('.')[0]}
#         socketio.emit('newSignal',msg , namespace='/test')
#     except:
#         logging.getLogger("HWR").error('error creating the message')

